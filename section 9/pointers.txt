Working with Pointers MEANS working with Addresses (memory)

* Reference to the data by Addresses
* Widely used in the embedded field to refer peripheral registers
* Widely used in system programming in general

Always initalize pointers to NULL if no other value is available
* NULL is a macro
* NULL is equivalent to zero (0)
* NULL is guranteed to not point to any memory location
* Definied in stddef.h but also included in stdio.h and stdlib.h

Example: 

int age = 25;
int *some_ptr = &age;

// Can cast to int pointer using the following
int *some_ptr = (int *) &age;

uint32_t *some_ptr = (uint32_t *) 0x100C;
* Specify that 0x100C is the address of a 32 bit unsiged integer
* Useful with registers! (embedded systems)

void *some_ptr = &age;

* Void pointers can point to any data type, use with caution! (no type checking)

Indirection

* A pointer provides an indirect means of accessing the value of a particular data item